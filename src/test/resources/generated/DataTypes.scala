// Generated by ScalaBuff, the Scala protocol buffer compiler. DO NOT EDIT!
// source: dataTypes.proto

object DataTypes {
	final case class DataTypes (
		varint1: Int = 0,
		varint2: Option[Long] = None,
		varint3: Option[Int] = None,
		varint4: Long = 0L,
		varint5: Option[Int] = None,
		varint6: Option[Long] = None,
		varint7: Option[Boolean] = None,
		f64bit1: Option[Long] = None,
		f64bit2: Option[Long] = None,
		f64bit3: Option[Double] = None,
		lengthDelim1: Option[String] = None,
		lengthDelim2: Option[com.google.protobuf.ByteString] = None,
		lengthDelim3: Option[Varint8Enum] = None,
		lengthDelim4: Vector[Int] = Vector.empty[Int],
		lengthDelim5: Vector[Int] = Vector.empty[Int],
		f32bit1: Option[Int] = None,
		f32bit2: Option[Int] = None,
		f32bit3: Option[Float] = None
	) extends com.google.protobuf.GeneratedMessageLite
		with hr.sandrogrzicic.scalabuff.runtime.Message[DataTypes] {

		def getVarint2 = varint2.getOrElse(0L)
		def getVarint3 = varint3.getOrElse(0)
		def getVarint5 = varint5.getOrElse(0)
		def getVarint6 = varint6.getOrElse(0L)
		def getVarint7 = varint7.getOrElse(false)
		def getF64bit1 = f64bit1.getOrElse(0L)
		def getF64bit2 = f64bit2.getOrElse(0L)
		def getF64bit3 = f64bit3.getOrElse(0.0)
		def getLengthDelim1 = lengthDelim1.getOrElse("")
		def getLengthDelim2 = lengthDelim2.getOrElse(com.google.protobuf.ByteString.EMPTY)
		def getLengthDelim3 = lengthDelim3.getOrElse(null)
		def getF32bit1 = f32bit1.getOrElse(0)
		def getF32bit2 = f32bit2.getOrElse(0)
		def getF32bit3 = f32bit3.getOrElse(0.0f)

		def writeTo(output: com.google.protobuf.CodedOutputStream) {
			output.writeInt32(1, varint1)
			varint2.foreach(output.writeInt64(2, _))
			varint3.foreach(output.writeUint32(3, _))
			output.writeUint64(4, varint4)
			varint5.foreach(output.writeSint32(5, _))
			varint6.foreach(output.writeSint64(6, _))
			varint7.foreach(output.writeBool(7, _))
			f64bit1.foreach(output.writeFixed64(100, _))
			f64bit2.foreach(output.writeSfixed64(101, _))
			f64bit3.foreach(output.writeDouble(102, _))
			lengthDelim1.foreach(output.writeString(200, _))
			lengthDelim2.foreach(output.writeBytes(201, _))
			lengthDelim3.foreach(output.writeVarint8Enum(202, _))
			lengthDelim4.foreach(output.writeInt32(204, _))
			lengthDelim5.foreach(output.writeInt32(203, _))
			f32bit1.foreach(output.writeFixed32(500, _))
			f32bit2.foreach(output.writeSfixed32(501, _))
			f32bit3.foreach(output.writeFloat(502, _))
		}
		def mergeFrom(m: DataTypes) = {
			DataTypes(
				m.varint1,
				m.varint2.orElse(varint2),
				m.varint3.orElse(varint3),
				m.varint4,
				m.varint5.orElse(varint5),
				m.varint6.orElse(varint6),
				m.varint7.orElse(varint7),
				m.f64bit1.orElse(f64bit1),
				m.f64bit2.orElse(f64bit2),
				m.f64bit3.orElse(f64bit3),
				m.lengthDelim1.orElse(lengthDelim1),
				m.lengthDelim2.orElse(lengthDelim2),
				m.lengthDelim3.orElse(lengthDelim3),
				lengthDelim4 ++ m.lengthDelim4,
				lengthDelim5 ++ m.lengthDelim5,
				m.f32bit1.orElse(f32bit1),
				m.f32bit2.orElse(f32bit2),
				m.f32bit3.orElse(f32bit3)
			)
		}

		def getDefaultInstanceForType = DataTypes.defaultInstance
		def clear = getDefaultInstanceForType
		def isInitialized = true
		def build = this
		def buildPartial = this
		def newBuilderForType = this
		def toBuilder = this
	}

	object DataTypes {
		@reflect.BeanProperty val defaultInstance = new DataTypes()
		def getDefaultInstance = defaultInstance

		val VARINT1_FIELD_NUMBER = 1
		val VARINT2_FIELD_NUMBER = 2
		val VARINT3_FIELD_NUMBER = 3
		val VARINT4_FIELD_NUMBER = 4
		val VARINT5_FIELD_NUMBER = 5
		val VARINT6_FIELD_NUMBER = 6
		val VARINT7_FIELD_NUMBER = 7
		val F64BIT1_FIELD_NUMBER = 100
		val F64BIT2_FIELD_NUMBER = 101
		val F64BIT3_FIELD_NUMBER = 102
		val LENGTH_DELIM1_FIELD_NUMBER = 200
		val LENGTH_DELIM2_FIELD_NUMBER = 201
		val LENGTH_DELIM3_FIELD_NUMBER = 202
		val LENGTH_DELIM4_FIELD_NUMBER = 204
		val LENGTH_DELIM5_FIELD_NUMBER = 203
		val F32BIT1_FIELD_NUMBER = 500
		val F32BIT2_FIELD_NUMBER = 501
		val F32BIT3_FIELD_NUMBER = 502

		object Varint8Enum extends hr.sandrogrzicic.scalabuff.runtime.Enum {
			sealed trait EnumVal extends Value
				
			val ENUM_ZERO = new EnumVal { val name = "ENUM_ZERO"; val id = 0 }
			val ENUM_ONE = new EnumVal { val name = "ENUM_ONE"; val id = 1 }

			val ENUM_ZERO_VALUE = 0
			val ENUM_ONE_VALUE = 1

			def valueOf(id: Int) = (id: @annotation.switch) match {
				case 0 => ENUM_ZERO
				case 1 => ENUM_ONE
			}
			val internalGetValueMap = new com.google.protobuf.Internal.EnumLiteMap[EnumVal] {
				def findValueByNumber(id: Int): EnumVal = valueOf(id)
			}
		}

	}

	def registerAllExtensions(registry: com.google.protobuf.ExtensionRegistryLite) {
	}

}