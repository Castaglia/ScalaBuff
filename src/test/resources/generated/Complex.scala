// Generated by ScalaBuff, the Scala protocol buffer compiler. DO NOT EDIT!
// source: complex.proto

object Complex {
	final case class ComplexMessage (
		firstField: com.google.protobuf.ByteString = com.google.protobuf.ByteString.EMPTY,
		secondField: Option[String] = None
	) extends com.google.protobuf.GeneratedMessageLite
		with hr.sandrogrzicic.scalabuff.runtime.Message[ComplexMessage] {

		def getSecondField = secondField.getOrElse("")
		def setFirstField(f: com.google.protobuf.ByteString) = copy(firstField = f)
		def setSecondField(f: String) = copy(secondField = f)

		def clearFirstField = copy(firstField = com.google.protobuf.ByteString.EMPTY)
		def clearSecondField = copy(secondField = None)

		def writeTo(output: com.google.protobuf.CodedOutputStream) {
			output.writeBytes(1, firstField)
			secondField.foreach(output.writeString(2, _))
		}
		def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): ComplexMessage = {
			var _firstField = com.google.protobuf.ByteString.EMPTY
			var _secondField = secondField

			while (true) (in.readTag: @annotation.switch) match {
			case 0 => return ComplexMessage(
				_firstField,
				_secondField
			)
			case 10 => _firstField = in.readBytes()
			case 18 => _secondField = in.readBytes().toStringUtf8
			case default => if (!in.skipField(default)) return ComplexMessage(
				_firstField,
				_secondField
			)
			}
			null // unreachable code
		}

		def mergeFrom(m: ComplexMessage) = {
			ComplexMessage(
				m.firstField,
				m.secondField.orElse(secondField)
			)
		}

		lazy val getSerializedSize = {
			import com.google.protobuf.CodedOutputStream._
			import com.google.protobuf.ByteString.copyFromUtf8
			var size = 0
			size += computeBytesSize(1, firstField)
			secondField.foreach(size += computeStringSize(2, _))

			size
		}

		def getDefaultInstanceForType = ComplexMessage.defaultInstance
		def clear = getDefaultInstanceForType
		def isInitialized = true
		def build = this
		def buildPartial = this
		def newBuilderForType = this
		def toBuilder = this
	}

	object ComplexMessage {
		@reflect.BeanProperty val defaultInstance = new ComplexMessage()

		val FIRST_FIELD_FIELD_NUMBER = 1
		val SECOND_FIELD_FIELD_NUMBER = 2

		object SimpleEnum extends hr.sandrogrzicic.scalabuff.runtime.Enum {
			sealed trait EnumVal extends Value
				
			val KEY_NAME = new EnumVal { val name = "KEY_NAME"; val id = 0 }

			val KEY_NAME_VALUE = 0

			def valueOf(id: Int) = (id: @annotation.switch) match {
				case 0 => KEY_NAME
			}
			val internalGetValueMap = new com.google.protobuf.Internal.EnumLiteMap[EnumVal] {
				def findValueByNumber(id: Int): EnumVal = valueOf(id)
			}
		}

		final case class Nested (
			nestedField: String = ""
		) extends com.google.protobuf.GeneratedMessageLite
			with hr.sandrogrzicic.scalabuff.runtime.Message[Nested] {

			def setNestedField(f: String) = copy(nestedField = f)

			def clearNestedField = copy(nestedField = "")

			def writeTo(output: com.google.protobuf.CodedOutputStream) {
				output.writeString(1, nestedField)
			}
			def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): Nested = {
				var _nestedField = ""

				while (true) (in.readTag: @annotation.switch) match {
				case 0 => return Nested(
					_nestedField
				)
				case 10 => _nestedField = in.readBytes().toStringUtf8
				case default => if (!in.skipField(default)) return Nested(
					_nestedField
				)
				}
				null // unreachable code
			}

			def mergeFrom(m: Nested) = {
				Nested(
					m.nestedField
				)
			}

			lazy val getSerializedSize = {
				import com.google.protobuf.CodedOutputStream._
				import com.google.protobuf.ByteString.copyFromUtf8
				var size = 0
				size += computeStringSize(1, nestedField)

				size
			}

			def getDefaultInstanceForType = Nested.defaultInstance
			def clear = getDefaultInstanceForType
			def isInitialized = true
			def build = this
			def buildPartial = this
			def newBuilderForType = this
			def toBuilder = this
		}

		object Nested {
			@reflect.BeanProperty val defaultInstance = new Nested()

			val NESTED_FIELD_FIELD_NUMBER = 1

		}
	}

	def registerAllExtensions(registry: com.google.protobuf.ExtensionRegistryLite) {
	}

}