package hr.sandrogrzicic.scalabuff

import collection.mutable.StringBuilder

/**
 * @author Sandro Gržičić
 */

object Generator {

	implicit def buffString(string: String): BuffedString = new BuffedString(string)

	protected def generate(tree: List[Node], sourceName: String) = {
		val o = StringBuilder.newBuilder

		o
			.append("// Generated by ScalaBuff, the Scala protocol buffer compiler. DO NOT EDIT!\n")
			.append("// source: " + sourceName + "\n\n")
			.append("class " + sourceName.dropUntilLast('.').camelCase + " {\n")

		for (node <- tree) {
			node match {
				case Message(name, body) => {

				}
				case _ =>
			}
		}
		o.append("}\n").mkString

	}

	def apply(tree: List[Node], sourceName: String) = {
		generate(tree, sourceName)
	}
}